generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Establishment {
  uuid         String     @id @default(uuid())
  description  String
  phone        String
  installments Int
  alert        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Category     Category[]
  Products     Products[]
  carousel     Carousel[]
}

model Category {
  uuid              String        @id @default(uuid())
  name              String
  establishment     Establishment @relation(fields: [establishmentUuid], references: [uuid])
  establishmentUuid String
  position          Int?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  Products          Products[]
}

model Carousel {
  establishment     Establishment @relation(fields: [establishmentUuid], references: [uuid])
  establishmentUuid String
  name              String
  uuid              String        @id @default(uuid())
}

model Products {
  uuid              String           @id @default(uuid())
  name              String
  description       String           @db.VarChar(510)
  isActive          Boolean          @default(false)
  category          Category?        @relation(fields: [categoryUuid], references: [uuid])
  categoryUuid      String?
  establishment     Establishment    @relation(fields: [establishmentUuid], references: [uuid])
  establishmentUuid String
  variants          ProductVariant[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ProductVariant {
  guid             String         @id @default(uuid())
  name             String
  price            Float
  promotionalPrice Float?
  Image            Image[]
  size             ProductsSize[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Products         Products?      @relation(fields: [productsUuid], references: [uuid])
  isFavorite       Boolean        @default(false)
  productsUuid     String?
}

model ProductsSize {
  uuid               String          @id @default(uuid())
  quantity           Int
  size               Size            @relation(fields: [sizeUuid], references: [uuid])
  sizeUuid           String
  ProductVariant     ProductVariant? @relation(fields: [productVariantGuid], references: [guid])
  productVariantGuid String?
}

model Size {
  uuid         String         @id @default(uuid())
  name         String
  ProductsSize ProductsSize[]
}

model Image {
  uuid               String          @id @default(uuid())
  imageId            String          @unique
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  ProductVariant     ProductVariant? @relation(fields: [productVariantGuid], references: [guid])
  productVariantGuid String?
}

model User {
  uuid         String         @id @default(uuid())
  email        String         @unique
  name         String
  phone        String
  password     String
  isAdmin      Boolean        @default(false)
  refreshToken String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  resetToken   ResetToken?
  orders       Order[]
  OrderTakeout OrderTakeout[]
  Panic        Panic[]
}

model ResetToken {
  uuid      String   @id @default(uuid())
  token     String
  userId    String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
}

model OrderTakeout {
  guid        String      @id @default(uuid())
  products    Json
  total       Float
  status      OrderStatus @default(pending)
  user        User        @relation(fields: [userId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  cpf         String
  paymentLink String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Panic {
  uuid      String   @id @default(uuid())
  order     Json
  user      User     @relation(fields: [userId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  guid         String      @id @default(uuid())
  products     Json
  total        Float
  status       OrderStatus @default(pending)
  user         User        @relation(fields: [userId], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  freightId    Int
  freightValue Float
  paymentLink  String
  state        String
  city         String
  neighborhood String
  street       String
  number       String
  cep          String
  complement   String?
  cpf          String
  tracking     String?
  isFixedFee   Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum OrderStatus {
  pending
  success
  cancelled
  finished
}
